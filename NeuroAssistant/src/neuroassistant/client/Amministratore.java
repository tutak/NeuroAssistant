package neuroassistant.client;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import java.net.*;
import java.util.*;
import org.apache.soap.rpc.*;
import org.apache.soap.encoding.SOAPMappingRegistry;
import org.apache.soap.*;
import org.apache.soap.encoding.soapenc.StringDeserializer;
import org.apache.soap.util.xml.QName;




/**Classe che rappresenta l'interfaccia per l'Amministratore da dove pu√≤ Aggiungere oppure Rimuovere nuovi utenti.
 *
 * @author Abdul Rasheed Tutakhail
 */
public class Amministratore extends javax.swing.JFrame {

 
    public Amministratore() {
        initComponents();
    }




    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        add = new javax.swing.JToggleButton();
        remove = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        password = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        username = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        medico = new javax.swing.JRadioButton();
        ricercatore = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        add.setText("   AGGIUNGI");
        add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        remove.setText("     RIMUOVI");
        remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/remove.png"))); // NOI18N
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        jLabel3.setText("(Password non richiesta)");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Password");

        jLabel1.setText("Username");

        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameActionPerformed(evt);
            }
        });

        jLabel4.setText("Ruolo");

        buttonGroup1.add(medico);
        medico.setActionCommand("medico");
        medico.setSelected(true);
        medico.setText("Medico");

        buttonGroup1.add(ricercatore);
        ricercatore.setActionCommand("ricercatore");
        ricercatore.setText("Ricercatore");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(password)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(medico)
                            .addComponent(ricercatore))))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(medico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ricercatore))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)))
                .addGap(30, 30, 30))
        );

        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 17)); // NOI18N
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cooltext558026900.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(127, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel3)
                        .addGap(46, 46, 46))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5)
                                .addGap(150, 150, 150)))
                        .addGap(124, 124, 124))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        String pass,utente,ruolo,msg="",msg2="";
         pass = password.getText();
         utente= username.getText();
         ruolo= buttonGroup1.getSelection().getActionCommand();
         
          if ((utente.equals("")) || (pass.equals(""))) {
                JOptionPane.showMessageDialog(this, "Attenzione la richesta non puo essere inoltrata se non sono stati completati tutti i campi", "Errore", JOptionPane.ERROR_MESSAGE);
               
          }

          else {
                            try {
                                  URL url = new URL("http://localhost:8080/soap/servlet/rpcrouter");
                                  //costruzione della chiamata
                                  Call chiamata = new Call();
                                  chiamata.setTargetObjectURI("urn:ServerNeuro");
                                  chiamata.setMethodName("login");
                                  chiamata.setEncodingStyleURI(Constants.NS_URI_SOAP_ENC);
                                 
                                   SOAPMappingRegistry smr = new SOAPMappingRegistry();
                                   StringDeserializer sd = new StringDeserializer ();
                                   smr.mapTypes (Constants.NS_URI_SOAP_ENC, new QName ("", "return"), null, null, sd);
                                   chiamata.setSOAPMappingRegistry(smr);


                                //creazione dei parametri

                                  Vector parametri = new Vector();
                                  parametri.addElement(new Parameter("username", String.class, utente, null));
                                  parametri.addElement(new Parameter("password", String.class, pass, null));
                                  parametri.addElement(new Parameter("ruolo", String.class, ruolo, null));
                                            
                      
                                  chiamata.setParams(parametri);

                                  try {
                                        Response risp = chiamata.invoke(url, "");                                        
                                        Parameter par = risp.getReturnValue();
                                        msg = (String) par.getValue();
                                   
                                        
                                  }

                                  catch (SOAPException e) {
                                        System.out.println("Errore causata da: (" + e.getFaultCode() + ") :" + e.getMessage());
                                        msg = "errore";
                                  }

                            } catch (MalformedURLException ex) {
                                  System.out.println("Exception: " + ex.getMessage());
                            }

                            if (msg.equals("si")) {
                                  JOptionPane.showMessageDialog(null, "Attenzione il utente inserito √® gia esistente nel database", "ATTENZIONE", JOptionPane.ERROR_MESSAGE);
                                  
                            } 
                            
                            else if(msg.equals("error-connessione")) {
                              JOptionPane.showMessageDialog(this, "La connessione √® fallita", "Errore", JOptionPane.ERROR_MESSAGE);
                                }

                           else if(msg.equals("error-query")){
                          JOptionPane.showMessageDialog(this, "Errore nella query", "Errore", JOptionPane.ERROR_MESSAGE);

                                 }
                            else if(msg.equals("no"))

                              {
                                  try {

                                        URL url = new URL("http://localhost:8080/soap/servlet/rpcrouter");
                                        //costruzione della chiamata
                                        Call chiamata = new Call();
                                        chiamata.setTargetObjectURI("urn:ServerNeuro");
                                        chiamata.setMethodName("aggiungi_utente");
                                        chiamata.setEncodingStyleURI(Constants.NS_URI_SOAP_ENC);


                                        SOAPMappingRegistry smr = new SOAPMappingRegistry();
                                        StringDeserializer sd = new StringDeserializer ();
                                        smr.mapTypes (Constants.NS_URI_SOAP_ENC, new QName ("", "return"), null, null, sd);
                                        chiamata.setSOAPMappingRegistry(smr);
                                        //creazione parametri
                                        Vector parametri = new Vector();
                                        parametri.addElement(new Parameter("username", String.class, utente, null));
                                        parametri.addElement(new Parameter("password", String.class, pass, null));
                                        parametri.addElement(new Parameter("ruolo", String.class, ruolo, null));
                                        chiamata.setParams(parametri);

                                        try {
                                              //invocazione della RPC
                                              Response risposta = chiamata.invoke(url, "");
                                             
                                                    Parameter par = risposta.getReturnValue();
                                                    msg2 = (String) par.getValue();
                                              
                                        }
                                        catch (SOAPException e) {
                                              System.out.println("Errore causato: (" + e.getFaultCode() + "):" + e.getMessage());
                                        }
                                  }

                                  catch (MalformedURLException ex) {
                                        System.out.println("Errore: " + ex.getMessage());
                                  }
                                  if (msg2.equals("si")) {
                                        JOptionPane.showMessageDialog(null, "La registrazione √® avvenuta con successo", "REGISTRAZIONE", JOptionPane.INFORMATION_MESSAGE);
                                                                                
                                  }
                                  else if(msg.equals("error-connessione")) {
                                        JOptionPane.showMessageDialog(this, "La connessione √® fallita", "Errore", JOptionPane.ERROR_MESSAGE);
                                             }

                                  else if(msg.equals("error-query")){
                                        JOptionPane.showMessageDialog(this, "Errore nella query", "Errore", JOptionPane.ERROR_MESSAGE);

                                                }


                            }
                      }
                
                       
    }//GEN-LAST:event_addActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        // TODO add your handling code here:  String elimina = (String) docenti.getSelectedItem();
        
      String pass,utente,ruolo,msg="",msg2="";
      utente= username.getText();
      ruolo= buttonGroup1.getSelection().getActionCommand();
      pass = password.getText();
      if (utente.equals("")) {
                JOptionPane.showMessageDialog(this, "Attenzione selezionare utente da eliminare", "ERRORE", JOptionPane.ERROR_MESSAGE);
          }

      else{
               try {
                                  URL url = new URL("http://localhost:8080/soap/servlet/rpcrouter");
                                  //costruzione della chiamata
                                  Call chiamata = new Call();
                                  chiamata.setTargetObjectURI("urn:ServerNeuro");
                                  chiamata.setMethodName("verifica_elimina");
                                  chiamata.setEncodingStyleURI(Constants.NS_URI_SOAP_ENC);
                                  //creazione dei parametri
                                  SOAPMappingRegistry smr = new SOAPMappingRegistry();
                                  StringDeserializer sd = new StringDeserializer ();
                                  smr.mapTypes (Constants.NS_URI_SOAP_ENC, new QName ("", "return"), null, null, sd);
                                  chiamata.setSOAPMappingRegistry(smr);




                                  Vector parametri = new Vector();
                                  parametri.addElement(new Parameter("username", String.class, utente, null));
                                  parametri.addElement(new Parameter("ruolo", String.class, ruolo, null));
                                  chiamata.setParams(parametri);

                                  try {
                                        Response risp = chiamata.invoke(url, "");                                        
                                        Parameter par = risp.getReturnValue();
                                        msg = (String) par.getValue();
                                                      
                                  }

                                  catch (SOAPException e) {
                                        System.out.println("Errore causat: (" + e.getFaultCode() + ") :" + e.getMessage());
                                        msg = "errore";
                                  }

                            } catch (MalformedURLException ex) {
                                  System.out.println("Exception: " + ex.getMessage());
                                         }
                            if (msg.equals("no")) {
                                  JOptionPane.showMessageDialog(null, "Attenzione l'utente non esiste o √® gi√† stato cancellato", "ATTENZIONE", JOptionPane.ERROR_MESSAGE);
                                           }
               
                             else if(msg.equals("error-connessione")) {
                              JOptionPane.showMessageDialog(this, "La connessione √® fallita", "Errore", JOptionPane.ERROR_MESSAGE);
                                                 }

                             else if(msg.equals("error-query")){
                             JOptionPane.showMessageDialog(this, "Errore nella query", "Errore", JOptionPane.ERROR_MESSAGE);

                                        }
                             else if(msg.equals("si")) {

 
                                    try {
                                             URL url = new URL("http://localhost:8080/soap/servlet/rpcrouter");
                                             Call chiamata = new Call();
                                             chiamata.setTargetObjectURI("urn:ServerNeuro");
                                             chiamata.setMethodName("elimina_utente");
                                             chiamata.setEncodingStyleURI(Constants.NS_URI_SOAP_ENC);

                                             SOAPMappingRegistry smr = new SOAPMappingRegistry();
                                             StringDeserializer sd = new StringDeserializer ();
                                             smr.mapTypes (Constants.NS_URI_SOAP_ENC, new QName ("", "return"), null, null, sd);
                                             chiamata.setSOAPMappingRegistry(smr);




                                              Vector parametri = new Vector();
                                              parametri.addElement(new Parameter("username", String.class, utente, null));
                                              parametri.addElement(new Parameter("ruolo", String.class, ruolo, null));
                                              chiamata.setParams(parametri);
                                             try {
                                                      Response risposta = chiamata.invoke(url, "");
                                                      if (!risposta.generatedFault()) {
                                                              Parameter par = risposta.getReturnValue();
                                                              Object value = par.getValue();
                                                              msg2 = String.valueOf(value);
                                                      if (msg2.equals("si")) {
                                                           JOptionPane.showMessageDialog(this, "l'utente √® stata cancellato con successo dal database", "CONFERMA", JOptionPane.INFORMATION_MESSAGE);
                                                          //  docenti();
                                                      }

                                                      else if(msg2.equals("error-connessione")) {
                                                             JOptionPane.showMessageDialog(this, "La connessione √® fallita", "Errore", JOptionPane.ERROR_MESSAGE);
                                                                                    }

                                                      else if(msg2.equals("error-query")){
                                                             JOptionPane.showMessageDialog(this, "Errore nella query", "Errore", JOptionPane.ERROR_MESSAGE);

                                                                                    }

                                                                        }
                                                }

                                             catch (SOAPException e) {
                                                System.out.println("Errore causato: (" + e.getFaultCode() + "):" + e.getMessage());
                                                              }
                                    }
                                    catch (MalformedURLException e) {
                                         JOptionPane.showMessageDialog(this, "Attenzione si e verificato un errore", "Errore", JOptionPane.ERROR_MESSAGE);
                                         System.out.println(e.getMessage());
                                                                    }
                                  }
         

       
    }//GEN-LAST:event_removeActionPerformed

  }
    
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel("com.seaglasslookandfeel.SeaGlassLookAndFeel");
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Amministratore.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(Amministratore.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(Amministratore.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(Amministratore.class.getName()).log(Level.SEVERE, null, ex);
                }
                new Amministratore().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton add;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton medico;
    private javax.swing.JPasswordField password;
    private javax.swing.JToggleButton remove;
    private javax.swing.JRadioButton ricercatore;
    private javax.swing.JFormattedTextField username;
    // End of variables declaration//GEN-END:variables

}
